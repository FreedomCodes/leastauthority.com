# Configuration for a private registry from
# https://github.com/kubernetes/kubernetes/tree/v1.4.5/cluster/addons/registry
apiVersion: 'v1'
kind: 'Namespace'
metadata:
  name: 'leastauthority-tweaks'
---
# Read about Services at
# http://kubernetes.io/docs/user-guide/services/
apiVersion: 'v1'
kind: 'Service'
metadata:
  name: 'private-registry'
  namespace: 'leastauthority-tweaks'
  labels:
    k8s-app: 'private-registry'
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "PrivateRegistry"
spec:
  selector:
    k8s-app: 'private-registry'
  ports:
  - name: 'registry'
    port: 30000
    nodePort: 30000
    protocol: 'TCP'
  type: 'NodePort'
---
apiVersion: 'v1'
kind: 'ReplicationController'
metadata:
  name: 'private-registry-v0'
  namespace: 'leastauthority-tweaks'
  labels:
    k8s-app: 'private-registry'
    version: 'v0'
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 1
  selector:
    k8s-app: 'private-registry'
    version: 'v0'
  template:
    metadata:
      labels:
        k8s-app: 'private-registry'
        version: 'v0'
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
      - name: 'registry'
        image: 'registry:2'
        resources:
          limits:
            cpu: '50m'
            memory: '100Mi'
        env:
        - name: 'REGISTRY_HTTP_ADDR'
          value: ':30000'
        - name: 'REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY'
          value: '/var/lib/registry'
        volumeMounts:
        - name: 'image-store'
          mountPath: '/var/lib/registry'
        ports:
        - containerPort: 30000
          name: 'registry'
          protocol: 'TCP'
      volumes:
      - name: 'image-store'
        persistentVolumeClaim:
          claimName: 'private-registry-pvc'
---
# Read about PersistentVolumeClaims at
# http://kubernetes.io/docs/user-guide/persistent-volumes/
kind: 'PersistentVolumeClaim'
apiVersion: 'v1'
metadata:
  name: 'private-registry-pvc'
  labels:
    provider: 'LeastAuthority'
    app: 's4'
    component: 'Platform'
    kubernetes.io/cluster-service: "true"
  annotations:
    # This enables dynamic provisioning of the volume.  See
    # http://kubernetes.io/docs/user-guide/persistent-volumes/#dynamic
    volume.beta.kubernetes.io/storage-class: 'normal'
spec:
  accessModes:
    - 'ReadWriteOnce'
  resources:
    requests:
      storage: '100G'
---
