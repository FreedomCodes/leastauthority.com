# Read about services at
# http://kubernetes.io/docs/user-guide/services/
kind: 'Service'
apiVersion: 'v1'
metadata:
  # http://kubernetes.io/docs/user-guide/identifiers/
  name: 's4'
  # http://kubernetes.io/docs/user-guide/labels/
  labels:
    # Everything we make and put into k8s will have this label.
    provider: 'LeastAuthority'
spec:
  selector:
    # Pick up all the other resources that claim to be part of the s4 app.
    # This makes everything with a matching label part of this service.
    provider: 'LeastAuthority'
    app: 's4'

  # This service exposes network ports via a load balancer - ELB on
  # AWS.  The load balancer will be configured to spread traffic
  # across healthy pods in this service.  The load balancer also acts
  # as the public endpoint for the service.  Without it, the service
  # is only internally accessible.
  #
  # Note that ELB on AWS takes a minute or two to become usable,
  # probably due to DNS record propagation delay.
  type: LoadBalancer

  ports:
  # Define the service's one HTTPS port.  This also causes
  # S4_SERVICE_PORT_HTTPS_SERVER to be set in the container's
  # environment.  This lets the container know where the HTTPS server
  # is really listening, avoiding the need to hard-code that
  # information into the container's image.
  - name: 'https-server'
    port: 443
    targetPort: 8443
    protocol: 'TCP'
  # It also redirects from HTTP to HTTPS.
  - name: 'http-server'
    port: 80
    targetPort: 8080
    protocol: 'TCP'
  - name: 'wormhole-relay'
    port: 4000
    protocol: 'TCP'
  - name: 'wormhole-transit-relay'
    port: 4001
    protocol: 'TCP'
---
# Read about services at
# http://kubernetes.io/docs/user-guide/services/
kind: 'Service'
apiVersion: 'v1'
metadata:
  # http://kubernetes.io/docs/user-guide/identifiers/
  name: 's4-logging'
  # http://kubernetes.io/docs/user-guide/labels/
  labels:
    # Everything we make and put into k8s will have this label.
    provider: 'LeastAuthority'
spec:
  selector:
    # Pick up all the other resources that claim to be part of the s4 app.
    # This makes everything with a matching label part of this service.
    provider: 'LeastAuthority'
    app: 's4'

  # This service exposes the log gatherer internally only.  Pods
  # running on the cluster can access it but the public internet
  # cannot.  ClusterIP is the default service type but we'll spell it
  # out here just to be clear.
  type: 'ClusterIP'

  # Tahoe-LAFS and other Foolscap-using applications can publish their
  # logs to a "log gatherer".  Centralizing the logs in a single place
  # makes it easier to inspect them later.
  ports:
  - name: 'gatherer-port'
    # Expose the service to the cluster on the normal port.
    port: 3117
    # We can select the port based on the name of a port of a
    # container belonging to the service.  It's probably also 3117 but
    # at least we can avoid duplicating that number one more time
    # here.
    targetPort: 'log-gatherer'
    protocol: 'TCP'
---
# Read about deployments at
# http://kubernetes.io/docs/user-guide/deployments/
kind: 'Deployment'
apiVersion: 'extensions/v1beta1'
metadata:
  name: 's4-infrastructure'
spec:

  # The containers both write directly to the filesystem.  It's not
  # safe to have more than one instance running at a time.  So limit
  # replicas to one and use a pod replacement strategy that destroys
  # old pods _before_ creating new ones.  Once filesystem access issue
  # is fixed, we can have horizontal scale-out and rolling updates
  # instead.
  replicas: 1
  strategy:
    type: 'Recreate'

  # This is a pod spec template.  The deployment uses it to create new pods
  # sometimes (for example, when starting up for the first time, upgrading, or
  # doing horizontal scale-out).
  template:
    metadata:
      labels:
        provider: 'LeastAuthority'
        app: 's4'
        component: 'Infrastructure'
    spec:
      volumes:
      - name: 'log-gatherer-data'
        persistentVolumeClaim:
          claimName: 'infrastructure-foolscap-logs-pvc'
      - name: 'web-data'
        persistentVolumeClaim:
          claimName: 'infrastructure-web-pvc'
      - name: 'flapp-data'
        persistentVolumeClaim:
          claimName: 'infrastructure-flapp-pvc'
      # Kubernetes manages some of the secrets we require.  Mount
      # them into the container.
      - name: 'web-secrets'
        secret:
          secretName: 'website-secrets'
      - name: 'flapp-secrets'
        secret:
          secretName: 'signup-secrets'


      # Read about containers at
      # http://kubernetes.io/docs/user-guide/production-pods/
      containers:

      # Here is the Foolscap log gatherer.
      - name: 'foolscap-log-gatherer'
        image: '127.0.0.1:30000/leastauthority/foolscap-gatherer:1941d38'
        env:
        - name: 'LAE_GATHERER_HINT'
          value: 'tcp:s4-logging:3117'
        ports:
        - name: 'log-gatherer'
          containerPort: 3117
        volumeMounts:
        - mountPath: '/data'
          name: 'log-gatherer-data'
        resources:
          limits:
            cpu: '20m'
            memory: '100Mi'

      # This is the web server.  It serves up all the
      # leastauthority.com content.
      - name: 'web'
        # This image is hosted by the cluster-private registry.
        # XXX This avoids `localhost` because different k8s
        # deployments seem to have different behavior with respect to
        # localhost resolution for the purposes of image pulls.
        # Specifically, kops deploys a cluster where localhost
        # resolves to [::1] where the registry is not available.
        image: '127.0.0.1:30000/leastauthority/web:1941d38'
        ports:
        # We just happen to know this is the ports this container listens on.
        - containerPort: 8443
        - containerPort: 8080
        volumeMounts:
        # We just happen to know these are the paths the container
        # wants to use for interesting, persistent state.
        - mountPath: '/app/data'
          name: 'web-data'
        - mountPath: '/app/flapp-data'
          name: 'flapp-data'
        - name: 'web-secrets'
          mountPath: '/app/k8s_secrets'
          readOnly: true
        resources:
          limits:
            cpu: '100m'
            memory: '100Mi'

      # This is the flapp server.  It handles signup requests.
      - name: 'flapp'
        # See above for explanation of 127.0.0.1
        image: '127.0.0.1:30000/leastauthority/flapp:1941d38'
        ports:
        - containerPort: 3116
        volumeMounts:
        - mountPath: '/app/data'
          name: 'flapp-data'
        - name: 'flapp-secrets'
          mountPath: '/app/k8s_secrets'
          readOnly: true
        resources:
          limits:
            cpu: '20m'
            memory: '100Mi'

      # This is the wormhole relay server.  It will help people get
      # introduced to their grid, someday.
      - name: 'wormhole-relay'
        # This image is hosted by the cluster-private registry.
        # XXX This avoids `localhost` because different k8s
        # deployments seem to have different behavior with respect to
        # localhost resolution for the purposes of image pulls.
        # Specifically, kops deploys a cluster where localhost
        # resolves to [::1] where the registry is not available.
        image: '127.0.0.1:30000/leastauthority/magicwormhole:1941d38'
        ports:
        # We just happen to know this is the ports this container listens on.
        - containerPort: 4000
        - containerPort: 4001
        resources:
          limits:
            cpu: '10m'
            memory: '100Mi'
---
# Read about StorageClass at
# http://blog.kubernetes.io/2016/10/dynamic-provisioning-and-storage-in-kubernetes.html
# and
# http://kubernetes.io/docs/user-guide/persistent-volumes/#storageclasses
# and
# http://kubernetes.io/docs/user-guide/persistent-volumes/#class-1
kind: 'StorageClass'
apiVersion: 'storage.k8s.io/v1beta1'
metadata:
  name: 'normal'
provisioner: 'kubernetes.io/aws-ebs'
parameters:
  # Read about types at
  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html
  # and
  # https://aws.amazon.com/ebs/pricing/
  type: 'gp2'
---
# Read about PersistentVolumeClaims at
# http://kubernetes.io/docs/user-guide/persistent-volumes/
kind: 'PersistentVolumeClaim'
apiVersion: 'v1'
metadata:
  name: 'infrastructure-foolscap-logs-pvc'
  labels:
    provider: 'LeastAuthority'
    app: 's4'
    component: 'Infrastructure'
  annotations:
    # This enables dynamic provisioning of the volume.  See
    # http://kubernetes.io/docs/user-guide/persistent-volumes/#dynamic
    volume.beta.kubernetes.io/storage-class: 'normal'
spec:
  accessModes:
    - 'ReadWriteOnce'
  resources:
    requests:
      storage: '10G'
---
# Read about PersistentVolumeClaims at
# http://kubernetes.io/docs/user-guide/persistent-volumes/
kind: 'PersistentVolumeClaim'
apiVersion: 'v1'
metadata:
  name: 'infrastructure-web-pvc'
  labels:
    provider: 'LeastAuthority'
    app: 's4'
    component: 'Infrastructure'
spec:
  accessModes:
    - 'ReadWriteOnce'
  resources:
    requests:
      storage: '1G'
---
# Read about PersistentVolumeClaims at
# http://kubernetes.io/docs/user-guide/persistent-volumes/
kind: 'PersistentVolumeClaim'
apiVersion: 'v1'
metadata:
  name: 'infrastructure-flapp-pvc'
  labels:
    provider: 'LeastAuthority'
    app: 's4'
    component: 'Infrastructure'
spec:
  accessModes:
    - 'ReadWriteOnce'
  resources:
    requests:
      storage: '1G'
---
# Read about PersistentVolumes at
# http://kubernetes.io/docs/user-guide/persistent-volumes/
kind: 'PersistentVolume'
apiVersion: 'v1'
metadata:
  name: 'infrastructure-web-pv'
  labels:
    provider: 'LeastAuthority'
    app: 's4'
    component: 'Infrastructure'
spec:
  capacity:
    storage: '1G'
  accessModes:
    # One node can mount this read-write.
    - 'ReadWriteOnce'
  awsElasticBlockStore:
    # Read about EBS volumes at
    # http://kubernetes.io/docs/user-guide/volumes/#awselasticblockstore
    #
    # Create this volume manually with a command like:
    #   aws ec2 create-volume --availability-zone us-east-1b --size 1
    volumeID: 'vol-0e80ac26be3edd63f'
    fsType: 'ext4'
---
# Read about PersistentVolumes at
# http://kubernetes.io/docs/user-guide/persistent-volumes/
kind: 'PersistentVolume'
apiVersion: 'v1'
metadata:
  name: 'infrastructure-flapp-pv'
  labels:
    provider: 'LeastAuthority'
    app: 's4'
    component: 'Infrastructure'
spec:
  capacity:
    storage: '1G'
  accessModes:
    # One node can mount this read-write.
    - 'ReadWriteOnce'
  awsElasticBlockStore:
    # Create this volume manually with a command like:
    #   aws ec2 create-volume --availability-zone us-east-1b --size 1
    volumeID: 'vol-01b01d11a6b17e2de'
    fsType: 'ext4'
