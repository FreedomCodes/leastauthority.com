#!/usr/bin/env python

from sys import argv

from twisted.python.filepath import FilePath
from twisted.python.usage import Options, UsageError

# Copied from lae_automation/server.py - don't desynchronize these and
# delete the other one when we get rid of all the old EC2 instances.
TAHOE_CFG_TEMPLATE = """# -*- mode: conf; coding: utf-8 -*-

# This file controls the configuration of the Tahoe node that
# lives in this directory. It is only read at node startup.
# For details about the keys that can be set here, please
# read the 'docs/configuration.rst' file that came with your
# Tahoe installation.


[node]
nickname = %(nickname)s
web.port =
web.static = public_html
tub.location = %(publichost)s:12346,%(privatehost)s:12346
log_gatherer.furl = %(incident_gatherer_furl)s

[client]
# Which services should this client connect to?
introducer.furl = %(introducer_furl)s
helper.furl =
stats_gatherer.furl = %(stats_gatherer_furl)s

[storage]
# Shall this node provide storage service?
enabled = true
backend = s3
s3.access_key_id = %(s3_access_key_id)s
s3.bucket = %(bucket_name)s

[helper]
# Shall this node run a helper service that clients can use?
enabled = false

[drop_upload]
# Shall this node automatically upload files created or modified in a local directory?
enabled = false
local.directory =
"""


_common_options = [
    ("root", None, None, "Path to the root of the node.", FilePath),

    ("tub-advertise-address", None, None,
     "The public-internet facing address at which this node is reachable."),
    ("tub-listen-address", None, None,
     "The internal address at which the tub will listen "
     "(Twisted endpoint string description)."),

    ("node-id", None, None, "The persistent, unique identifier for this node."),
    ("certificate", None, None,
     "The certificate (PEM) portion of the node's persistent "
     "cryptographically strong identity."),
    ("private-key", None, None,
     "The private key (PEM) portion of the node's persistent "
     "cryptographically strong identity."),

    ("s3-bucket", None, None,
     "The name of the AWS S3 bucket this storage node will use for storage."),
    ("s3-access-key-id", None, None,
     "An AWS access key identifier which grants access to the S3 bucket."),
    ("s3-secret-key", None, None,
     "The secret key corresponding to --s3-access-key-id."),

    ("introducer-furl", None, None,
     "The FURL of a Tahoe-LAFS introducer which will introduce clients to "
     "this storage node."),
    ("incident-gatherer-furl", None, None,
     "The FURL of a Foolscap log gatherer which can collect this nodes logs."),
    ("stats-gatherer-furl", None, None,
     "The FURL of a Foolscap stats gather to which operational statistics "
     "will be sent."),
]

class IntroducerOptions(Options):
    optParameters = _common_options


class StorageOptions(Options):
    optParameters = _common_options


class PutSecretsOptions(Options):
    subCommands = [
        ("introducer", None, IntroducerOptions, "Record introducer node-related secrets."),
        ("storage", None, StorageOptions, "Record storage node-related secrets."),
    ]

    def postOptions(self):
        if self.subCommand is None:
            self.opt_help()
    
def main():
    options = PutSecretsOptions()
    try:
        options.parseOptions(argv[1:])
    except UsageError as e:
        raise SystemExit(str(e))

    o = options.subOptions
    put_secrets(
        o["root"],
        o["portfile"],
        o["tub-advertise-address"],
        o["tub-listen-address"],
        o["node-id"],
        o["certificate"],
        o["private-key"],
        o["s3-bucket"],
        o["s3-access-key-id"],
        o["s3-secret-key"],
        o["introducer-furl"],
        o["incident-gatherer-furl"],
        o["stats-gatherer-furl"],
    )


def put_introducer_secrets(
        root, tub_advertise_address
):
    root.child(b"introducer.port").setContent(tub_advertise_address + b"\n")


def put_storage_secrets(
        root, tub_advertise_address
):
    root.child(b"client.port").setContent(tub_advertise_address + b"\n")


def put_secrets(
        root, portfile,
        tub_advertise_address,
        tub_listen_address,
        node_id, certificate, private_key,
        s3_bucket, s3_access_key_id, s3_secret_key,
        introducer_furl,
        incident_gatherer_furl, stats_gatherer_furl
):
    root.child(portfile).setContent(tub_advertise_address + b"\n")
    root.child(b"my_nodeid").setContent(node_id + b"\n")
    
    private = root.child(b"private")
    private.child(b"node.pem").setContent(certificate.strip() + "\n" + private_key.strip() + "\n")

    private.child("s3secret").setContent(s3_secret_key)

    tahoe_cfg = TAHOE_CFG_TEMPLATE % dict(
        nickname=s3_bucket,
        publichost=tub_advertise_address,
        # XXX Do we need privatehost?
        privatehost="127.0.0.1",
        s3_access_key_id=s3_access_key_id,
        bucket_name=s3_bucket,
        introducer_furl=introducer_furl,
        incident_gatherer_furl=incident_gatherer_furl or "",
        stats_gatherer_furl=stats_gatherer_furl or "",
    )
    root.child("tahoe.cfg").setContent(tahoe_cfg)

if __name__ == '__main__':
    main()
