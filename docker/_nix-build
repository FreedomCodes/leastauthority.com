#!/usr/bin/env nix-shell
#! nix-shell -i python --packages pythonPackages.docker

# ^^ From
# https://gist.github.com/MostAwesomeDude/2fed99e5cf630639df42df7997e12d1e#file-verifier-py-L1-L2
#
# "-i python" tells it to use python as an interpreter for the rest of the
# script, run in the environment set up by installing the given packages.

from __future__ import print_function, unicode_literals

from sys import argv, stdout
from datetime import datetime
from subprocess import PIPE, STDOUT, CalledProcessError, Popen

from docker import from_env


def nixbuild(name, progress):
    image_archive_filename = name + ".tar.gz"

    # Build it.
    expr = "/leastauthority.com/docker/{}.nix".format(name)
    build_command = [
        "nix-build",

        # When things fail, this gives more details about where.
        "--show-trace",

        # Set the name of the file into which the derivation is written.
        # We rely on this later to load the result in to Docker.
        "--out-link", image_archive_filename,

        # Point at the file containing the expression to derive.
        expr,
    ]
    collected_output = []
    try:
	for output in check_incremental_output(build_command, stderr=STDOUT):
            collected_output.append(output)
            progress(output)
    except CalledProcessError as e:
        report("Building {} failed:\n".format(name))
        report(relevant_output("".join(collected_output)))
        raise SystemExit(e.returncode)

    return image_archive_filename



def relevant_output(output):
    return "\n".join(output.splitlines()[-100:]) + "\n"



def check_incremental_output(command, *args, **kwargs):
    process = Popen(command, *args, stdout=PIPE, **kwargs)
    for line in process.stdout:
        yield line
    returncode = process.wait()
    if returncode != 0:
        raise CalledProcessError(returncode, command)



def loadimage(image_archive_filename):
    # Load the built Docker image archive into Docker.
    client = from_env(version="auto")
    with open(image_archive_filename) as image_archive:
        client.images.load(image_archive.read())



def buildimage(names, progress):
    for name in names:
        report("Building {}...\n".format(name))
        result = nixbuild(name.decode("utf-8"), progress)
        report("Build complete.\n")
        yield result



def report(s):
    stdout.write(s)
    stdout.flush()



PROGRESS_REPORTERS = {
    True: report,
    False: lambda output: report(datetime.now().isoformat() + "\n"),
}


def main(argv):
    try:
        argv.remove("--verbose")
    except ValueError:
        verbose = False
    else:
        verbose = True
    try:
        argv.remove("--load")
    except ValueError:
        load = False
    else:
        load = True

    progress = PROGRESS_REPORTERS[verbose]
    for path in buildimage(argv, progress):
        if load:
            report("Loading {}...\n".format(path))
            loadimage(path)
            report("Load complete.\n")



main(argv[1:])
