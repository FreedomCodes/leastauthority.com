#!/usr/bin/env nix-shell
#! nix-shell -i python --packages pythonPackages.docker

# ^^ From
# https://gist.github.com/MostAwesomeDude/2fed99e5cf630639df42df7997e12d1e#file-verifier-py-L1-L2
#
# "-i python" tells it to use python as an interpreter for the rest of the
# script, run in the environment set up by installing the given packages.

from sys import argv
# from os import environ
# from os.path import isdir
from subprocess import check_output

from docker import from_env


def nixbuild(name):
    # Build it.
    output = check_output([u"nix-build", u"/leastauthority.com/docker/" + name])

    # Get the name of the built artifact.
    image_archive_filename = output.splitlines()[-1]

    # Load the built Docker image archive into Docker.
    client = from_env(version="auto")
    with open(image_archive_filename) as image_archive:
        client.images.load(image_archive.read())


def main(names):
    # As a horrible hack, copy everything from the cache volume into
    # the Nix store.  The cache volume is separate from the Nix store
    # because the Nix store has some initial state from the container
    # that it would be hard to initialize a volume with.
    # cache_path = environ[u"CACHE_PATH"].decode("utf-8")
    # if isdir(cache_path):
    #     print("Priming nix store...")
    #     check_output([u"rsync", u"-avP", cache_path + u"/", u"/nix/"])

    try:
        for name in names:
            nixbuild(name)
    finally:
        pass
        # # Copy everything back to the cache volume so it is available
        # # for next time.
        # if isdir(cache_path):
        #     print("Caching nix store...")
        #     check_output([u"rsync", u"-avP", u"/nix/", cache_path + u"/"])


main(argv[1:])
