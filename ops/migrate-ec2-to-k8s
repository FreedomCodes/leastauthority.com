#!/usr/bin/env python

from __future__ import unicode_literals

from os import devnull
from sys import argv, stdin
from json import load

from twisted.python.usage import UsageError, Options
from twisted.python.url import URL
from twisted.internet.task import react
from twisted.web.client import Agent

from lae_automation.containers import autopad_b32decode
from lae_automation.model import (
    DeploymentConfiguration,
    SubscriptionDetails,
)
from lae_automation.signup import provision_subscription
from lae_automation.subscription_manager import network_client

class MigrateOptions(Options):
    optParameters = [
        ("input", None, "-", "The SSEC2 subscription details file for the subscription to migrate (- for stdin)."),
        ("subscribe-api", None, None, "A URL giving the base of the subscription manager API to which to migrate the subscription."),
        ("email", None, None, "The email address associated with this subscription."),
        ("plan-id", None, None, "The product identifier for this subscription."),
    ]

    def postOptions(self):
        if self["input"] == "-":
            self["input"] = stdin
        else:
            self["input"] = open(self["input"], "rt")
        self["subscribe-api"] = URL.fromText(self["subscribe-api"].decode("utf-8"))


@react
def main(reactor):
    o = MigrateOptions()
    try:
        o.parseOptions(argv[1:])
    except UsageError as e:
        raise SystemExit(unicode(e))

    old_secrets = load(o["input"])

    bucket_name = old_secrets["bucket_name"]
    sub, cus = bucket_name.split("-")[-2:]
    sub = autopad_b32decode(sub).decode("utf-8")
    cus = autopad_b32decode(cus).decode("utf-8")

    deploy_config = DeploymentConfiguration(
        introducer_image="127.0.0.1:30000/leastauthority/tahoe-introducer:cf04e58",
        storageserver_image="127.0.0.1:30000/leastauthority/tahoe-storage:cf04e58",

        # I happen to know the rest of these aren't used in the following
        # codepaths.
        domain="example.invalid",
        kubernetes_namespace=None,
        subscription_manager_endpoint=None,
        products=[{}],

        s3_access_key_id="invalid key id",
        s3_secret_key="invalid key",

        ssec2_access_key_id=None,
        ssec2_secret_path=None,
        ssec2admin_keypair_name=None,
        ssec2admin_privkey_path=None,

        monitor_pubkey_path=None,
        monitor_privkey_path=None,

        secretsfile=open(devnull),
    )

    details = SubscriptionDetails(
        bucketname=bucket_name,
        oldsecrets=old_secrets,
        customer_email=o["email"],
        customer_pgpinfo=None,
        product_id=o["plan-id"].decode("utf-8"),

        customer_id=cus,
        subscription_id=sub,

        # Generated by the subscription manager.
        introducer_port_number=0,
        storage_port_number=0,
    )

    smclient = network_client(
        o["subscribe-api"].asText().encode("utf-8"),
        Agent(reactor),
    )

    return provision_subscription(
        reactor, deploy_config, details, smclient,
    )
