#!/usr/bin/env python

from errno import ENOENT, EEXIST
from sys import stdin
from json import load

from twisted.python.filepath import FilePath

TAHOE_CFG_TEMPLATE = """# -*- mode: conf; coding: utf-8 -*-

# This file controls the configuration of the Tahoe node that
# lives in this directory. It is only read at node startup.
# For details about the keys that can be set here, please
# read the 'docs/configuration.rst' file that came with your
# Tahoe installation.


[node]
nickname = %(nickname)s
web.port =
web.static = public_html
tub.location = %(publichost)s:12346,%(privatehost)s:12346
log_gatherer.furl = %(incident_gatherer_furl)s

[client]
# Which services should this client connect to?
introducer.furl = %(introducer_furl)s
helper.furl =
stats_gatherer.furl = %(stats_gatherer_furl)s

[storage]
# Shall this node provide storage service?
enabled = true
backend = s3
s3.access_key_id = %(s3_access_key_id)s
s3.bucket = %(bucket_name)s

[helper]
# Shall this node run a helper service that clients can use?
enabled = false

[drop_upload]
# Shall this node automatically upload files created or modified in a local directory?
enabled = false
local.directory =
"""

def main():
    config = load(stdin)
    if "introducer" in config:
        section = config["introducer"]
        configure_introducer(
            introducer=FilePath(section["root"]),
            port=section["port"],
            node_pem=section["node_pem"],
            node_id=section["node_id"],
        )
    if "storage" in config:
        section = config["storage"]
        configure_storage(
            storage=FilePath(section["root"]),
            port=section["port"],
            node_pem=section["node_pem"],
            node_privkey=section["node_privkey"],
            node_id=section["node_id"],
            bucket_name=section["bucket_name"],
            publichost=section["publichost"],
            privatehost=section["privatehost"],
            introducer_furl=section["introducer_furl"],
            s3_access_key_id=section["s3_access_key_id"],
            s3_secret_key=section["s3_secret_key"],
        )


def configure_introducer(introducer, port, node_pem, node_id):
    force_remove(introducer.child(b"introducer.furl"))
    force_remove(introducer.descendant((b"private", b"introducer.furl")))
    force_remove(introducer.child(b"logport.furl"))

    introducer.child(b"introducer.port").setContent(
        u"{}".format(port).encode("ascii")
    )
    configure_secrets(introducer, node_pem, node_id)


def configure_storage(
        storage, port, node_pem, node_id, node_privkey,
        bucket_name, publichost, privatehost, introducer_furl,
        s3_access_key_id, s3_secret_key
):
    storage.child(b"client.port").setContent(
        u"{}".format(port).encode("ascii")
    )

    configure_secrets(storage, node_pem, node_id)
    if node_privkey is not None:
        storage.descendant((b"private", "node.privkey")).setContent(node_privkey)
    storage.descendant((b"private", "s3secret")).setContent(s3_secret_key)

    tahoe_cfg = TAHOE_CFG_TEMPLATE % dict(
        nickname=bucket_name,
        publichost=publichost,
        privatehost=privatehost,
        introducer_furl=introducer_furl,
        s3_access_key_id=s3_access_key_id,
        bucket_name=bucket_name,
        incident_gatherer_furl="",
        stats_gatherer_furl="",
    )

    storage.child(b"tahoe.cfg").setContent(tahoe_cfg)


def configure_secrets(root, node_pem, node_id):
    private = root.child(b"private")
    makedir_if_missing(private, mode=0700)
    if node_pem is not None:
        private.child(b"node.pem").setContent(node_pem)

    if my_nodeid is not None:
        root.child(b"my_nodeid").setContent(node_id)


def makedir_if_missing(path, mode):
    try:
        path.makedirs()
    except OSError as e:
        if EEXIST != e.errno:
            raise
    else:
        path.chmod(mode)


def force_remove(path):
    try:
        path.remove()
    except OSError as e:
        if ENOENT != e.errno:
            raise


if __name__ == '__main__':
    main()
