#!/usr/bin/env python

from json import dump
from ConfigParser import SafeConfigParser
from errno import ENOENT

from sys import argv, stdout

from twisted.python.filepath import FilePath

def main():
    introducer_root, storage_root = argv[1:]

    secrets = {}
    secrets.update(record_introducer_secrets(FilePath(introducer_root)))
    secrets.update(record_storage_secrets(FilePath(storage_root)))

    dump(secrets, stdout)

def record_introducer_secrets(root):
    return dict(
        introducer_node_pem=root.descendant((b"private", "node.pem")).getContent(),
        introducer_nodeid=root.child(b"my_nodeid").getContent(),
    )

def record_storage_secrets(root):
    privkey_path = root.descendant((b"private", "node.privkey"))
    try:
        privkey = privkey_path.getContent()
    except OSError as e:
        if ENOENT != e.errno:
            raise
        privkey = None

    config = SafeConfigParser()
    with root.child(b"tahoe.cfg").open() as cfg:
        config.readfp(cfg)
    
    return dict(
        server_node_pem=root.descendant((b"private", "node.pem")).getContent(),
        server_nodeid=root.child(b"my_nodeid").getContent(),
        server_node_privkey=privkey,
        internal_introducer_furl=config.get("client", "introducer.furl"),
        access_key_id=config.get("storage", "s3.access_key_id"),
        secret_key=root.descendant((b"private", b"s3secret")).getContent(),
        bucket_name=config.get("storage", "s3.bucket"),
        tub_location=config.get('node', 'tub.location'),
    )

if __name__ == '__main__':
    main()
